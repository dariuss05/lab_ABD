

// Ivasca Darius-Nicusor, master anul 1 TI, UPT
Proiect ABD folosind container Docker. 

// 1) Pornim container-ul docker creat, avand nume abd_mongo_lab, username=mongoadmin, password=darius, pe portul 27017, utilizand ultima versiune de mongo
docker run -d --name abd_mongo_lab -e MONGO_INITDB_ROOT_USERNAME=mongoadmin -e MONGO_INITDB_ROOT_PASSWORD=darius -p 27017:27017 mongo:latest

// 2) Importam .csv-ul folosind comanda mongoimport in db-ul abd_proiect, in colectia states, specificand tipul fisierului si faptul ca prima linie din fisierul .csv sunt titlurile coloanelor (prin utilizarea --headerline) => !!! comanda este folosita in afara environment-ului de docker !!!
mongoimport --db=abd_proiect --collection=states --file=simplemaps/uszips.csv --type=csv --headerline  mongodb://mongoadmin:darius@localhost:27017/?authSource=admin

// 3) Conectare la container-ul Docker:
mongosh mongodb://mongoadmin:darius@localhost:27017/?authSource=admin

// CERINTA A: "Get the states with a total population of over 10 million."

Am inceput prin a crea un index pentru deoarece am considerat ca este mai eficienta cautarea statelor. Prin faptul ca am creat un index pentru "state_name" si "population", inseamna ca se "realizeaza" o baza de date "temporara" unde sunt stocate doar coloanele respective.


db.states.createIndex({state_name : 1})
db.states.createIndex({population : 1})

db.states.aggregate([
  {
    $group: {
      _id: "$state_name",
      total_population: { $sum: "$population" }
    }
  },
  {
    $match: {
      total_population: { $gt: 10000000 }
    }
  }
])

In $group, am grupat statele, unde am realizat suma populatiei in fiecare stat, ca mai apoi sa realizez un $match unde am verificat doar statele cu o populatie mai mare de 10 milioane.


// CERINTA B: "Get the average city population by state."

Query-ul pentru cerinta, teoretic, ar fi in felul urmator:

db.states.aggregate([
  {
    $group: {
      _id: "$state_name",
      average_population: { $avg: "$population" }
    }
  }
])

Insa am observat faptul ca da valori "null" la unele rezultate, astfel, a fost nevoie de o anumita filtrare pentru a putea scoate aceste valori:

db.states.aggregate([
  {
    $match: {
      population: { $exists: true, $ne: null, $type: "number" }
    }
  },
  {
    $group: {
      _id: "$state_name",
      average_population: { $avg: "$population" }
    }
  },
  {
    $project: {
      _id: 1,
      average_population: { $round: ["$average_population", 0] }
    }
  }
])

Utilizand $match, pentru a putea filtra documente in colectie, in functie de criterii, in cazul meu: coloana de populatie sa existe ($exists: true), coloana de populatie sa nu fie egala cu null ($ne: null), si respectiv aceasta sa aiba tip-ul numar ($type: number). Documentele care indeplinesc aceste cerinte sunt "pasate" in urmatorul stagiu.

Utilizand $group, am putut lua state_name si media populatiei folosind operatorul $avg.

Iar ultimul stagiu, $project, l-am folosit pentru a putea avea rezultate "curate". In asa fel incat average_population sa nu fie numar cu virgula, utilizand operatorul $round cu precizie de 0.


// CERINTA C: "Get the largest and the smallest city in each state."

db.states.aggregate([
  {
    $group: {
      _id: "$state_name",
      largest_city: { $max: { city: "$city", population: "$population" } },
      smallest_city: { $min: { city: "$city", population: "$population" } }
    }
  }
])

Acelasi caz, observ ca query-ul da si valori nule, asa ca am incercat sa le filtrez:

db.states.aggregate([
  {
    $sort: {
      state_name: 1,
      population: -1 
    }
  },
  {
    $group: {
      _id: "$state_name",
      largestCity: { $first: { city: "$city", population: "$population" } },
      smallestCity: { $last: { city: "$city", population: "$population" } }
    }
  },
  {
    $project: {
      state_name: "$_id",
      largest_city: "$largestCity.city",
      largest_city_population: "$largestCity.population",
      smallest_city: "$smallestCity.city",
      smallest_city_population: "$smallestCity.population"
    }
  }
])


// CERINTA D: "Get the largest and the smallest counties in each state."

Teoretic este schimbat doar o coloana fata de query-ul precedent.

db.states.aggregate([
  {
    $sort: {
      state_name: 1,
      population: -1 
    }
  },
  {
    $group: {
      _id: "$state_name",
      largest_county: { $first: { county_name: "$county_name", population: "$population" } },
      smallest_county: { $last: { county_name: "$county_name", population: "$population" } }
    }
  },
  {
    $project: {
      state_name: "$_id",
      largest_county: "$largest_county.county_name",
      largest_city_population: "$largest_county.population",
      smallest_county: "$smallest_county.county_name",
      smallest_county_population: "$smallest_county.population"
    }
  }
])